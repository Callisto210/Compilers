Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> podprogramy
Rule 2     podprogramy -> podprogramy podprogram
Rule 3     podprogramy -> <empty>
Rule 4     podprogram -> declaration
Rule 5     podprogram -> fundef
Rule 6     podprogram -> instruction
Rule 7     podprogram -> <empty>
Rule 8     declaration -> TYPE inits ;
Rule 9     declaration -> error ;
Rule 10    inits -> inits , init
Rule 11    inits -> init
Rule 12    init -> ID = expression
Rule 13    instructions -> instruction instructions
Rule 14    instructions -> instruction
Rule 15    instruction -> print_instr
Rule 16    instruction -> labeled_instr
Rule 17    instruction -> assignment
Rule 18    instruction -> choice_instr
Rule 19    instruction -> while_instr
Rule 20    instruction -> repeat_instr
Rule 21    instruction -> return_instr
Rule 22    instruction -> break_instr
Rule 23    instruction -> continue_instr
Rule 24    instruction -> compound_instr
Rule 25    instruction -> expression ;
Rule 26    print_instr -> PRINT expr_list ;
Rule 27    print_instr -> PRINT error ;
Rule 28    labeled_instr -> ID : instruction
Rule 29    assignment -> ID = expression ;
Rule 30    choice_instr -> IF ( condition ) instruction
Rule 31    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 32    choice_instr -> IF ( error ) instruction
Rule 33    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 34    while_instr -> WHILE ( condition ) instruction
Rule 35    while_instr -> WHILE ( error ) instruction
Rule 36    repeat_instr -> REPEAT instructions UNTIL condition ;
Rule 37    return_instr -> RETURN expression ;
Rule 38    continue_instr -> CONTINUE ;
Rule 39    break_instr -> BREAK ;
Rule 40    units -> units unit
Rule 41    units -> <empty>
Rule 42    unit -> declaration
Rule 43    unit -> instruction
Rule 44    unit -> <empty>
Rule 45    compound_instr -> { units }
Rule 46    condition -> expression
Rule 47    const -> integer
Rule 48    const -> float
Rule 49    const -> string
Rule 50    integer -> INTEGER
Rule 51    float -> FLOAT
Rule 52    string -> STRING
Rule 53    expression -> ID
Rule 54    expression -> const
Rule 55    expression -> expression + expression
Rule 56    expression -> expression - expression
Rule 57    expression -> expression * expression
Rule 58    expression -> expression / expression
Rule 59    expression -> expression % expression
Rule 60    expression -> expression | expression
Rule 61    expression -> expression & expression
Rule 62    expression -> expression ^ expression
Rule 63    expression -> expression AND expression
Rule 64    expression -> expression OR expression
Rule 65    expression -> expression SHL expression
Rule 66    expression -> expression SHR expression
Rule 67    expression -> expression EQ expression
Rule 68    expression -> expression NEQ expression
Rule 69    expression -> expression > expression
Rule 70    expression -> expression < expression
Rule 71    expression -> expression LE expression
Rule 72    expression -> expression GE expression
Rule 73    expression -> ( expression )
Rule 74    expression -> ( error )
Rule 75    expression -> ID ( expr_list_or_empty )
Rule 76    expression -> ID ( error )
Rule 77    expr_list_or_empty -> expr_list
Rule 78    expr_list_or_empty -> <empty>
Rule 79    expr_list -> expr_list , expression
Rule 80    expr_list -> expression
Rule 81    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 82    args_list_or_empty -> args_list
Rule 83    args_list_or_empty -> <empty>
Rule 84    args_list -> args_list , arg
Rule 85    args_list -> arg
Rule 86    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 59
&                    : 61
(                    : 30 31 32 33 34 35 73 74 75 76 81
)                    : 30 31 32 33 34 35 73 74 75 76 81
*                    : 57
+                    : 55
,                    : 10 79 84
-                    : 56
/                    : 58
:                    : 28
;                    : 8 9 25 26 27 29 36 37 38 39
<                    : 70
=                    : 12 29
>                    : 69
AND                  : 63
BREAK                : 39
CONTINUE             : 38
ELSE                 : 31 33
EQ                   : 67
FLOAT                : 51
GE                   : 72
ID                   : 12 28 29 53 75 76 81 86
IF                   : 30 31 32 33
INTEGER              : 50
LE                   : 71
NEQ                  : 68
OR                   : 64
PRINT                : 26 27
REPEAT               : 36
RETURN               : 37
SHL                  : 65
SHR                  : 66
STRING               : 52
TYPE                 : 8 81 86
UNTIL                : 36
WHILE                : 34 35
^                    : 62
error                : 9 27 32 33 35 74 76
{                    : 45
|                    : 60
}                    : 45

Nonterminals, with rules where they appear

arg                  : 84 85
args_list            : 82 84
args_list_or_empty   : 81
assignment           : 17
break_instr          : 22
choice_instr         : 18
compound_instr       : 24 81
condition            : 30 31 34 36
const                : 54
continue_instr       : 23
declaration          : 4 42
expr_list            : 26 77 79
expr_list_or_empty   : 75
expression           : 12 25 29 37 46 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 79 80
float                : 48
fundef               : 5
init                 : 10 11
inits                : 8 10
instruction          : 6 13 14 28 30 31 31 32 33 33 34 35 43
instructions         : 13 36
integer              : 47
labeled_instr        : 16
podprogram           : 2
podprogramy          : 1 2
print_instr          : 15
program              : 0
repeat_instr         : 20
return_instr         : 21
string               : 49
unit                 : 40
units                : 40 45
while_instr          : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . podprogramy
    (2) podprogramy -> . podprogramy podprogram
    (3) podprogramy -> .

    TYPE            reduce using rule 3 (podprogramy -> .)
    error           reduce using rule 3 (podprogramy -> .)
    PRINT           reduce using rule 3 (podprogramy -> .)
    ID              reduce using rule 3 (podprogramy -> .)
    IF              reduce using rule 3 (podprogramy -> .)
    WHILE           reduce using rule 3 (podprogramy -> .)
    REPEAT          reduce using rule 3 (podprogramy -> .)
    RETURN          reduce using rule 3 (podprogramy -> .)
    BREAK           reduce using rule 3 (podprogramy -> .)
    CONTINUE        reduce using rule 3 (podprogramy -> .)
    {               reduce using rule 3 (podprogramy -> .)
    (               reduce using rule 3 (podprogramy -> .)
    INTEGER         reduce using rule 3 (podprogramy -> .)
    FLOAT           reduce using rule 3 (podprogramy -> .)
    STRING          reduce using rule 3 (podprogramy -> .)
    $end            reduce using rule 3 (podprogramy -> .)

    program                        shift and go to state 1
    podprogramy                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> podprogramy .
    (2) podprogramy -> podprogramy . podprogram
    (4) podprogram -> . declaration
    (5) podprogram -> . fundef
    (6) podprogram -> . instruction
    (7) podprogram -> .
    (8) declaration -> . TYPE inits ;
    (9) declaration -> . error ;
    (81) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> podprogramy .)
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 1 (program -> podprogramy .)
    TYPE            shift and go to state 36
    error           shift and go to state 34
    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

  ! TYPE            [ reduce using rule 7 (podprogram -> .) ]
  ! error           [ reduce using rule 7 (podprogram -> .) ]
  ! PRINT           [ reduce using rule 7 (podprogram -> .) ]
  ! ID              [ reduce using rule 7 (podprogram -> .) ]
  ! IF              [ reduce using rule 7 (podprogram -> .) ]
  ! WHILE           [ reduce using rule 7 (podprogram -> .) ]
  ! REPEAT          [ reduce using rule 7 (podprogram -> .) ]
  ! RETURN          [ reduce using rule 7 (podprogram -> .) ]
  ! BREAK           [ reduce using rule 7 (podprogram -> .) ]
  ! CONTINUE        [ reduce using rule 7 (podprogram -> .) ]
  ! {               [ reduce using rule 7 (podprogram -> .) ]
  ! (               [ reduce using rule 7 (podprogram -> .) ]
  ! INTEGER         [ reduce using rule 7 (podprogram -> .) ]
  ! FLOAT           [ reduce using rule 7 (podprogram -> .) ]
  ! STRING          [ reduce using rule 7 (podprogram -> .) ]
  ! $end            [ reduce using rule 7 (podprogram -> .) ]

    float                          shift and go to state 5
    choice_instr                   shift and go to state 6
    repeat_instr                   shift and go to state 11
    return_instr                   shift and go to state 12
    const                          shift and go to state 13
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    podprogram                     shift and go to state 17
    string                         shift and go to state 20
    assignment                     shift and go to state 21
    labeled_instr                  shift and go to state 22
    compound_instr                 shift and go to state 23
    declaration                    shift and go to state 24
    integer                        shift and go to state 8
    break_instr                    shift and go to state 27
    instruction                    shift and go to state 28
    fundef                         shift and go to state 29
    print_instr                    shift and go to state 31
    expression                     shift and go to state 33

state 3

    (51) float -> FLOAT .

    +               reduce using rule 51 (float -> FLOAT .)
    -               reduce using rule 51 (float -> FLOAT .)
    *               reduce using rule 51 (float -> FLOAT .)
    /               reduce using rule 51 (float -> FLOAT .)
    %               reduce using rule 51 (float -> FLOAT .)
    |               reduce using rule 51 (float -> FLOAT .)
    &               reduce using rule 51 (float -> FLOAT .)
    ^               reduce using rule 51 (float -> FLOAT .)
    AND             reduce using rule 51 (float -> FLOAT .)
    OR              reduce using rule 51 (float -> FLOAT .)
    SHL             reduce using rule 51 (float -> FLOAT .)
    SHR             reduce using rule 51 (float -> FLOAT .)
    EQ              reduce using rule 51 (float -> FLOAT .)
    NEQ             reduce using rule 51 (float -> FLOAT .)
    >               reduce using rule 51 (float -> FLOAT .)
    <               reduce using rule 51 (float -> FLOAT .)
    LE              reduce using rule 51 (float -> FLOAT .)
    GE              reduce using rule 51 (float -> FLOAT .)
    ;               reduce using rule 51 (float -> FLOAT .)
    ,               reduce using rule 51 (float -> FLOAT .)
    )               reduce using rule 51 (float -> FLOAT .)


state 4

    (37) return_instr -> RETURN . expression ;
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 38

state 5

    (48) const -> float .

    ;               reduce using rule 48 (const -> float .)
    +               reduce using rule 48 (const -> float .)
    -               reduce using rule 48 (const -> float .)
    *               reduce using rule 48 (const -> float .)
    /               reduce using rule 48 (const -> float .)
    %               reduce using rule 48 (const -> float .)
    |               reduce using rule 48 (const -> float .)
    &               reduce using rule 48 (const -> float .)
    ^               reduce using rule 48 (const -> float .)
    AND             reduce using rule 48 (const -> float .)
    OR              reduce using rule 48 (const -> float .)
    SHL             reduce using rule 48 (const -> float .)
    SHR             reduce using rule 48 (const -> float .)
    EQ              reduce using rule 48 (const -> float .)
    NEQ             reduce using rule 48 (const -> float .)
    >               reduce using rule 48 (const -> float .)
    <               reduce using rule 48 (const -> float .)
    LE              reduce using rule 48 (const -> float .)
    GE              reduce using rule 48 (const -> float .)
    ,               reduce using rule 48 (const -> float .)
    )               reduce using rule 48 (const -> float .)


state 6

    (18) instruction -> choice_instr .

    TYPE            reduce using rule 18 (instruction -> choice_instr .)
    error           reduce using rule 18 (instruction -> choice_instr .)
    PRINT           reduce using rule 18 (instruction -> choice_instr .)
    ID              reduce using rule 18 (instruction -> choice_instr .)
    IF              reduce using rule 18 (instruction -> choice_instr .)
    WHILE           reduce using rule 18 (instruction -> choice_instr .)
    REPEAT          reduce using rule 18 (instruction -> choice_instr .)
    RETURN          reduce using rule 18 (instruction -> choice_instr .)
    BREAK           reduce using rule 18 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 18 (instruction -> choice_instr .)
    {               reduce using rule 18 (instruction -> choice_instr .)
    (               reduce using rule 18 (instruction -> choice_instr .)
    INTEGER         reduce using rule 18 (instruction -> choice_instr .)
    FLOAT           reduce using rule 18 (instruction -> choice_instr .)
    STRING          reduce using rule 18 (instruction -> choice_instr .)
    $end            reduce using rule 18 (instruction -> choice_instr .)
    UNTIL           reduce using rule 18 (instruction -> choice_instr .)
    }               reduce using rule 18 (instruction -> choice_instr .)
    ELSE            reduce using rule 18 (instruction -> choice_instr .)


state 7

    (52) string -> STRING .

    +               reduce using rule 52 (string -> STRING .)
    -               reduce using rule 52 (string -> STRING .)
    *               reduce using rule 52 (string -> STRING .)
    /               reduce using rule 52 (string -> STRING .)
    %               reduce using rule 52 (string -> STRING .)
    |               reduce using rule 52 (string -> STRING .)
    &               reduce using rule 52 (string -> STRING .)
    ^               reduce using rule 52 (string -> STRING .)
    AND             reduce using rule 52 (string -> STRING .)
    OR              reduce using rule 52 (string -> STRING .)
    SHL             reduce using rule 52 (string -> STRING .)
    SHR             reduce using rule 52 (string -> STRING .)
    EQ              reduce using rule 52 (string -> STRING .)
    NEQ             reduce using rule 52 (string -> STRING .)
    >               reduce using rule 52 (string -> STRING .)
    <               reduce using rule 52 (string -> STRING .)
    LE              reduce using rule 52 (string -> STRING .)
    GE              reduce using rule 52 (string -> STRING .)
    ;               reduce using rule 52 (string -> STRING .)
    ,               reduce using rule 52 (string -> STRING .)
    )               reduce using rule 52 (string -> STRING .)


state 8

    (47) const -> integer .

    ;               reduce using rule 47 (const -> integer .)
    +               reduce using rule 47 (const -> integer .)
    -               reduce using rule 47 (const -> integer .)
    *               reduce using rule 47 (const -> integer .)
    /               reduce using rule 47 (const -> integer .)
    %               reduce using rule 47 (const -> integer .)
    |               reduce using rule 47 (const -> integer .)
    &               reduce using rule 47 (const -> integer .)
    ^               reduce using rule 47 (const -> integer .)
    AND             reduce using rule 47 (const -> integer .)
    OR              reduce using rule 47 (const -> integer .)
    SHL             reduce using rule 47 (const -> integer .)
    SHR             reduce using rule 47 (const -> integer .)
    EQ              reduce using rule 47 (const -> integer .)
    NEQ             reduce using rule 47 (const -> integer .)
    >               reduce using rule 47 (const -> integer .)
    <               reduce using rule 47 (const -> integer .)
    LE              reduce using rule 47 (const -> integer .)
    GE              reduce using rule 47 (const -> integer .)
    ,               reduce using rule 47 (const -> integer .)
    )               reduce using rule 47 (const -> integer .)


state 9

    (26) print_instr -> PRINT . expr_list ;
    (27) print_instr -> PRINT . error ;
    (79) expr_list -> . expr_list , expression
    (80) expr_list -> . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    error           shift and go to state 40
    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    string                         shift and go to state 20
    expr_list                      shift and go to state 39
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 41
    const                          shift and go to state 13

state 10

    (34) while_instr -> WHILE . ( condition ) instruction
    (35) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 42


state 11

    (20) instruction -> repeat_instr .

    TYPE            reduce using rule 20 (instruction -> repeat_instr .)
    error           reduce using rule 20 (instruction -> repeat_instr .)
    PRINT           reduce using rule 20 (instruction -> repeat_instr .)
    ID              reduce using rule 20 (instruction -> repeat_instr .)
    IF              reduce using rule 20 (instruction -> repeat_instr .)
    WHILE           reduce using rule 20 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 20 (instruction -> repeat_instr .)
    RETURN          reduce using rule 20 (instruction -> repeat_instr .)
    BREAK           reduce using rule 20 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 20 (instruction -> repeat_instr .)
    {               reduce using rule 20 (instruction -> repeat_instr .)
    (               reduce using rule 20 (instruction -> repeat_instr .)
    INTEGER         reduce using rule 20 (instruction -> repeat_instr .)
    FLOAT           reduce using rule 20 (instruction -> repeat_instr .)
    STRING          reduce using rule 20 (instruction -> repeat_instr .)
    $end            reduce using rule 20 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 20 (instruction -> repeat_instr .)
    }               reduce using rule 20 (instruction -> repeat_instr .)
    ELSE            reduce using rule 20 (instruction -> repeat_instr .)


state 12

    (21) instruction -> return_instr .

    TYPE            reduce using rule 21 (instruction -> return_instr .)
    error           reduce using rule 21 (instruction -> return_instr .)
    PRINT           reduce using rule 21 (instruction -> return_instr .)
    ID              reduce using rule 21 (instruction -> return_instr .)
    IF              reduce using rule 21 (instruction -> return_instr .)
    WHILE           reduce using rule 21 (instruction -> return_instr .)
    REPEAT          reduce using rule 21 (instruction -> return_instr .)
    RETURN          reduce using rule 21 (instruction -> return_instr .)
    BREAK           reduce using rule 21 (instruction -> return_instr .)
    CONTINUE        reduce using rule 21 (instruction -> return_instr .)
    {               reduce using rule 21 (instruction -> return_instr .)
    (               reduce using rule 21 (instruction -> return_instr .)
    INTEGER         reduce using rule 21 (instruction -> return_instr .)
    FLOAT           reduce using rule 21 (instruction -> return_instr .)
    STRING          reduce using rule 21 (instruction -> return_instr .)
    $end            reduce using rule 21 (instruction -> return_instr .)
    UNTIL           reduce using rule 21 (instruction -> return_instr .)
    }               reduce using rule 21 (instruction -> return_instr .)
    ELSE            reduce using rule 21 (instruction -> return_instr .)


state 13

    (54) expression -> const .

    +               reduce using rule 54 (expression -> const .)
    -               reduce using rule 54 (expression -> const .)
    *               reduce using rule 54 (expression -> const .)
    /               reduce using rule 54 (expression -> const .)
    %               reduce using rule 54 (expression -> const .)
    |               reduce using rule 54 (expression -> const .)
    &               reduce using rule 54 (expression -> const .)
    ^               reduce using rule 54 (expression -> const .)
    AND             reduce using rule 54 (expression -> const .)
    OR              reduce using rule 54 (expression -> const .)
    SHL             reduce using rule 54 (expression -> const .)
    SHR             reduce using rule 54 (expression -> const .)
    EQ              reduce using rule 54 (expression -> const .)
    NEQ             reduce using rule 54 (expression -> const .)
    >               reduce using rule 54 (expression -> const .)
    <               reduce using rule 54 (expression -> const .)
    LE              reduce using rule 54 (expression -> const .)
    GE              reduce using rule 54 (expression -> const .)
    ;               reduce using rule 54 (expression -> const .)
    ,               reduce using rule 54 (expression -> const .)
    )               reduce using rule 54 (expression -> const .)


state 14

    (73) expression -> ( . expression )
    (74) expression -> ( . error )
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    error           shift and go to state 43
    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 44

state 15

    (23) instruction -> continue_instr .

    TYPE            reduce using rule 23 (instruction -> continue_instr .)
    error           reduce using rule 23 (instruction -> continue_instr .)
    PRINT           reduce using rule 23 (instruction -> continue_instr .)
    ID              reduce using rule 23 (instruction -> continue_instr .)
    IF              reduce using rule 23 (instruction -> continue_instr .)
    WHILE           reduce using rule 23 (instruction -> continue_instr .)
    REPEAT          reduce using rule 23 (instruction -> continue_instr .)
    RETURN          reduce using rule 23 (instruction -> continue_instr .)
    BREAK           reduce using rule 23 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 23 (instruction -> continue_instr .)
    {               reduce using rule 23 (instruction -> continue_instr .)
    (               reduce using rule 23 (instruction -> continue_instr .)
    INTEGER         reduce using rule 23 (instruction -> continue_instr .)
    FLOAT           reduce using rule 23 (instruction -> continue_instr .)
    STRING          reduce using rule 23 (instruction -> continue_instr .)
    $end            reduce using rule 23 (instruction -> continue_instr .)
    UNTIL           reduce using rule 23 (instruction -> continue_instr .)
    }               reduce using rule 23 (instruction -> continue_instr .)
    ELSE            reduce using rule 23 (instruction -> continue_instr .)


state 16

    (19) instruction -> while_instr .

    TYPE            reduce using rule 19 (instruction -> while_instr .)
    error           reduce using rule 19 (instruction -> while_instr .)
    PRINT           reduce using rule 19 (instruction -> while_instr .)
    ID              reduce using rule 19 (instruction -> while_instr .)
    IF              reduce using rule 19 (instruction -> while_instr .)
    WHILE           reduce using rule 19 (instruction -> while_instr .)
    REPEAT          reduce using rule 19 (instruction -> while_instr .)
    RETURN          reduce using rule 19 (instruction -> while_instr .)
    BREAK           reduce using rule 19 (instruction -> while_instr .)
    CONTINUE        reduce using rule 19 (instruction -> while_instr .)
    {               reduce using rule 19 (instruction -> while_instr .)
    (               reduce using rule 19 (instruction -> while_instr .)
    INTEGER         reduce using rule 19 (instruction -> while_instr .)
    FLOAT           reduce using rule 19 (instruction -> while_instr .)
    STRING          reduce using rule 19 (instruction -> while_instr .)
    $end            reduce using rule 19 (instruction -> while_instr .)
    UNTIL           reduce using rule 19 (instruction -> while_instr .)
    }               reduce using rule 19 (instruction -> while_instr .)
    ELSE            reduce using rule 19 (instruction -> while_instr .)


state 17

    (2) podprogramy -> podprogramy podprogram .

    TYPE            reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    error           reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    PRINT           reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    ID              reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    IF              reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    WHILE           reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    REPEAT          reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    RETURN          reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    BREAK           reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    CONTINUE        reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    {               reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    (               reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    INTEGER         reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    FLOAT           reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    STRING          reduce using rule 2 (podprogramy -> podprogramy podprogram .)
    $end            reduce using rule 2 (podprogramy -> podprogramy podprogram .)


state 18

    (50) integer -> INTEGER .

    ;               reduce using rule 50 (integer -> INTEGER .)
    +               reduce using rule 50 (integer -> INTEGER .)
    -               reduce using rule 50 (integer -> INTEGER .)
    *               reduce using rule 50 (integer -> INTEGER .)
    /               reduce using rule 50 (integer -> INTEGER .)
    %               reduce using rule 50 (integer -> INTEGER .)
    |               reduce using rule 50 (integer -> INTEGER .)
    &               reduce using rule 50 (integer -> INTEGER .)
    ^               reduce using rule 50 (integer -> INTEGER .)
    AND             reduce using rule 50 (integer -> INTEGER .)
    OR              reduce using rule 50 (integer -> INTEGER .)
    SHL             reduce using rule 50 (integer -> INTEGER .)
    SHR             reduce using rule 50 (integer -> INTEGER .)
    EQ              reduce using rule 50 (integer -> INTEGER .)
    NEQ             reduce using rule 50 (integer -> INTEGER .)
    >               reduce using rule 50 (integer -> INTEGER .)
    <               reduce using rule 50 (integer -> INTEGER .)
    LE              reduce using rule 50 (integer -> INTEGER .)
    GE              reduce using rule 50 (integer -> INTEGER .)
    ,               reduce using rule 50 (integer -> INTEGER .)
    )               reduce using rule 50 (integer -> INTEGER .)


state 19

    (36) repeat_instr -> REPEAT . instructions UNTIL condition ;
    (13) instructions -> . instruction instructions
    (14) instructions -> . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 46
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 22
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    repeat_instr                   shift and go to state 11
    break_instr                    shift and go to state 27
    while_instr                    shift and go to state 16
    expression                     shift and go to state 33
    instructions                   shift and go to state 45

state 20

    (49) const -> string .

    ;               reduce using rule 49 (const -> string .)
    +               reduce using rule 49 (const -> string .)
    -               reduce using rule 49 (const -> string .)
    *               reduce using rule 49 (const -> string .)
    /               reduce using rule 49 (const -> string .)
    %               reduce using rule 49 (const -> string .)
    |               reduce using rule 49 (const -> string .)
    &               reduce using rule 49 (const -> string .)
    ^               reduce using rule 49 (const -> string .)
    AND             reduce using rule 49 (const -> string .)
    OR              reduce using rule 49 (const -> string .)
    SHL             reduce using rule 49 (const -> string .)
    SHR             reduce using rule 49 (const -> string .)
    EQ              reduce using rule 49 (const -> string .)
    NEQ             reduce using rule 49 (const -> string .)
    >               reduce using rule 49 (const -> string .)
    <               reduce using rule 49 (const -> string .)
    LE              reduce using rule 49 (const -> string .)
    GE              reduce using rule 49 (const -> string .)
    ,               reduce using rule 49 (const -> string .)
    )               reduce using rule 49 (const -> string .)


state 21

    (17) instruction -> assignment .

    TYPE            reduce using rule 17 (instruction -> assignment .)
    error           reduce using rule 17 (instruction -> assignment .)
    PRINT           reduce using rule 17 (instruction -> assignment .)
    ID              reduce using rule 17 (instruction -> assignment .)
    IF              reduce using rule 17 (instruction -> assignment .)
    WHILE           reduce using rule 17 (instruction -> assignment .)
    REPEAT          reduce using rule 17 (instruction -> assignment .)
    RETURN          reduce using rule 17 (instruction -> assignment .)
    BREAK           reduce using rule 17 (instruction -> assignment .)
    CONTINUE        reduce using rule 17 (instruction -> assignment .)
    {               reduce using rule 17 (instruction -> assignment .)
    (               reduce using rule 17 (instruction -> assignment .)
    INTEGER         reduce using rule 17 (instruction -> assignment .)
    FLOAT           reduce using rule 17 (instruction -> assignment .)
    STRING          reduce using rule 17 (instruction -> assignment .)
    $end            reduce using rule 17 (instruction -> assignment .)
    UNTIL           reduce using rule 17 (instruction -> assignment .)
    }               reduce using rule 17 (instruction -> assignment .)
    ELSE            reduce using rule 17 (instruction -> assignment .)


state 22

    (16) instruction -> labeled_instr .

    TYPE            reduce using rule 16 (instruction -> labeled_instr .)
    error           reduce using rule 16 (instruction -> labeled_instr .)
    PRINT           reduce using rule 16 (instruction -> labeled_instr .)
    ID              reduce using rule 16 (instruction -> labeled_instr .)
    IF              reduce using rule 16 (instruction -> labeled_instr .)
    WHILE           reduce using rule 16 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 16 (instruction -> labeled_instr .)
    RETURN          reduce using rule 16 (instruction -> labeled_instr .)
    BREAK           reduce using rule 16 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 16 (instruction -> labeled_instr .)
    {               reduce using rule 16 (instruction -> labeled_instr .)
    (               reduce using rule 16 (instruction -> labeled_instr .)
    INTEGER         reduce using rule 16 (instruction -> labeled_instr .)
    FLOAT           reduce using rule 16 (instruction -> labeled_instr .)
    STRING          reduce using rule 16 (instruction -> labeled_instr .)
    $end            reduce using rule 16 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 16 (instruction -> labeled_instr .)
    }               reduce using rule 16 (instruction -> labeled_instr .)
    ELSE            reduce using rule 16 (instruction -> labeled_instr .)


state 23

    (24) instruction -> compound_instr .

    TYPE            reduce using rule 24 (instruction -> compound_instr .)
    error           reduce using rule 24 (instruction -> compound_instr .)
    PRINT           reduce using rule 24 (instruction -> compound_instr .)
    ID              reduce using rule 24 (instruction -> compound_instr .)
    IF              reduce using rule 24 (instruction -> compound_instr .)
    WHILE           reduce using rule 24 (instruction -> compound_instr .)
    REPEAT          reduce using rule 24 (instruction -> compound_instr .)
    RETURN          reduce using rule 24 (instruction -> compound_instr .)
    BREAK           reduce using rule 24 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 24 (instruction -> compound_instr .)
    {               reduce using rule 24 (instruction -> compound_instr .)
    (               reduce using rule 24 (instruction -> compound_instr .)
    INTEGER         reduce using rule 24 (instruction -> compound_instr .)
    FLOAT           reduce using rule 24 (instruction -> compound_instr .)
    STRING          reduce using rule 24 (instruction -> compound_instr .)
    $end            reduce using rule 24 (instruction -> compound_instr .)
    UNTIL           reduce using rule 24 (instruction -> compound_instr .)
    }               reduce using rule 24 (instruction -> compound_instr .)
    ELSE            reduce using rule 24 (instruction -> compound_instr .)


state 24

    (4) podprogram -> declaration .

    TYPE            reduce using rule 4 (podprogram -> declaration .)
    error           reduce using rule 4 (podprogram -> declaration .)
    PRINT           reduce using rule 4 (podprogram -> declaration .)
    ID              reduce using rule 4 (podprogram -> declaration .)
    IF              reduce using rule 4 (podprogram -> declaration .)
    WHILE           reduce using rule 4 (podprogram -> declaration .)
    REPEAT          reduce using rule 4 (podprogram -> declaration .)
    RETURN          reduce using rule 4 (podprogram -> declaration .)
    BREAK           reduce using rule 4 (podprogram -> declaration .)
    CONTINUE        reduce using rule 4 (podprogram -> declaration .)
    {               reduce using rule 4 (podprogram -> declaration .)
    (               reduce using rule 4 (podprogram -> declaration .)
    INTEGER         reduce using rule 4 (podprogram -> declaration .)
    FLOAT           reduce using rule 4 (podprogram -> declaration .)
    STRING          reduce using rule 4 (podprogram -> declaration .)
    $end            reduce using rule 4 (podprogram -> declaration .)


state 25

    (28) labeled_instr -> ID . : instruction
    (29) assignment -> ID . = expression ;
    (53) expression -> ID .
    (75) expression -> ID . ( expr_list_or_empty )
    (76) expression -> ID . ( error )

    :               shift and go to state 48
    =               shift and go to state 49
    ;               reduce using rule 53 (expression -> ID .)
    +               reduce using rule 53 (expression -> ID .)
    -               reduce using rule 53 (expression -> ID .)
    *               reduce using rule 53 (expression -> ID .)
    /               reduce using rule 53 (expression -> ID .)
    %               reduce using rule 53 (expression -> ID .)
    |               reduce using rule 53 (expression -> ID .)
    &               reduce using rule 53 (expression -> ID .)
    ^               reduce using rule 53 (expression -> ID .)
    AND             reduce using rule 53 (expression -> ID .)
    OR              reduce using rule 53 (expression -> ID .)
    SHL             reduce using rule 53 (expression -> ID .)
    SHR             reduce using rule 53 (expression -> ID .)
    EQ              reduce using rule 53 (expression -> ID .)
    NEQ             reduce using rule 53 (expression -> ID .)
    >               reduce using rule 53 (expression -> ID .)
    <               reduce using rule 53 (expression -> ID .)
    LE              reduce using rule 53 (expression -> ID .)
    GE              reduce using rule 53 (expression -> ID .)
    (               shift and go to state 47


state 26

    (30) choice_instr -> IF . ( condition ) instruction
    (31) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (32) choice_instr -> IF . ( error ) instruction
    (33) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 50


state 27

    (22) instruction -> break_instr .

    TYPE            reduce using rule 22 (instruction -> break_instr .)
    error           reduce using rule 22 (instruction -> break_instr .)
    PRINT           reduce using rule 22 (instruction -> break_instr .)
    ID              reduce using rule 22 (instruction -> break_instr .)
    IF              reduce using rule 22 (instruction -> break_instr .)
    WHILE           reduce using rule 22 (instruction -> break_instr .)
    REPEAT          reduce using rule 22 (instruction -> break_instr .)
    RETURN          reduce using rule 22 (instruction -> break_instr .)
    BREAK           reduce using rule 22 (instruction -> break_instr .)
    CONTINUE        reduce using rule 22 (instruction -> break_instr .)
    {               reduce using rule 22 (instruction -> break_instr .)
    (               reduce using rule 22 (instruction -> break_instr .)
    INTEGER         reduce using rule 22 (instruction -> break_instr .)
    FLOAT           reduce using rule 22 (instruction -> break_instr .)
    STRING          reduce using rule 22 (instruction -> break_instr .)
    $end            reduce using rule 22 (instruction -> break_instr .)
    UNTIL           reduce using rule 22 (instruction -> break_instr .)
    }               reduce using rule 22 (instruction -> break_instr .)
    ELSE            reduce using rule 22 (instruction -> break_instr .)


state 28

    (6) podprogram -> instruction .

    TYPE            reduce using rule 6 (podprogram -> instruction .)
    error           reduce using rule 6 (podprogram -> instruction .)
    PRINT           reduce using rule 6 (podprogram -> instruction .)
    ID              reduce using rule 6 (podprogram -> instruction .)
    IF              reduce using rule 6 (podprogram -> instruction .)
    WHILE           reduce using rule 6 (podprogram -> instruction .)
    REPEAT          reduce using rule 6 (podprogram -> instruction .)
    RETURN          reduce using rule 6 (podprogram -> instruction .)
    BREAK           reduce using rule 6 (podprogram -> instruction .)
    CONTINUE        reduce using rule 6 (podprogram -> instruction .)
    {               reduce using rule 6 (podprogram -> instruction .)
    (               reduce using rule 6 (podprogram -> instruction .)
    INTEGER         reduce using rule 6 (podprogram -> instruction .)
    FLOAT           reduce using rule 6 (podprogram -> instruction .)
    STRING          reduce using rule 6 (podprogram -> instruction .)
    $end            reduce using rule 6 (podprogram -> instruction .)


state 29

    (5) podprogram -> fundef .

    TYPE            reduce using rule 5 (podprogram -> fundef .)
    error           reduce using rule 5 (podprogram -> fundef .)
    PRINT           reduce using rule 5 (podprogram -> fundef .)
    ID              reduce using rule 5 (podprogram -> fundef .)
    IF              reduce using rule 5 (podprogram -> fundef .)
    WHILE           reduce using rule 5 (podprogram -> fundef .)
    REPEAT          reduce using rule 5 (podprogram -> fundef .)
    RETURN          reduce using rule 5 (podprogram -> fundef .)
    BREAK           reduce using rule 5 (podprogram -> fundef .)
    CONTINUE        reduce using rule 5 (podprogram -> fundef .)
    {               reduce using rule 5 (podprogram -> fundef .)
    (               reduce using rule 5 (podprogram -> fundef .)
    INTEGER         reduce using rule 5 (podprogram -> fundef .)
    FLOAT           reduce using rule 5 (podprogram -> fundef .)
    STRING          reduce using rule 5 (podprogram -> fundef .)
    $end            reduce using rule 5 (podprogram -> fundef .)


state 30

    (39) break_instr -> BREAK . ;

    ;               shift and go to state 51


state 31

    (15) instruction -> print_instr .

    TYPE            reduce using rule 15 (instruction -> print_instr .)
    error           reduce using rule 15 (instruction -> print_instr .)
    PRINT           reduce using rule 15 (instruction -> print_instr .)
    ID              reduce using rule 15 (instruction -> print_instr .)
    IF              reduce using rule 15 (instruction -> print_instr .)
    WHILE           reduce using rule 15 (instruction -> print_instr .)
    REPEAT          reduce using rule 15 (instruction -> print_instr .)
    RETURN          reduce using rule 15 (instruction -> print_instr .)
    BREAK           reduce using rule 15 (instruction -> print_instr .)
    CONTINUE        reduce using rule 15 (instruction -> print_instr .)
    {               reduce using rule 15 (instruction -> print_instr .)
    (               reduce using rule 15 (instruction -> print_instr .)
    INTEGER         reduce using rule 15 (instruction -> print_instr .)
    FLOAT           reduce using rule 15 (instruction -> print_instr .)
    STRING          reduce using rule 15 (instruction -> print_instr .)
    $end            reduce using rule 15 (instruction -> print_instr .)
    UNTIL           reduce using rule 15 (instruction -> print_instr .)
    }               reduce using rule 15 (instruction -> print_instr .)
    ELSE            reduce using rule 15 (instruction -> print_instr .)


state 32

    (38) continue_instr -> CONTINUE . ;

    ;               shift and go to state 52


state 33

    (25) instruction -> expression . ;
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    ;               shift and go to state 68
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 34

    (9) declaration -> error . ;

    ;               shift and go to state 72


state 35

    (45) compound_instr -> { . units }
    (40) units -> . units unit
    (41) units -> .

    }               reduce using rule 41 (units -> .)
    TYPE            reduce using rule 41 (units -> .)
    error           reduce using rule 41 (units -> .)
    PRINT           reduce using rule 41 (units -> .)
    ID              reduce using rule 41 (units -> .)
    IF              reduce using rule 41 (units -> .)
    WHILE           reduce using rule 41 (units -> .)
    REPEAT          reduce using rule 41 (units -> .)
    RETURN          reduce using rule 41 (units -> .)
    BREAK           reduce using rule 41 (units -> .)
    CONTINUE        reduce using rule 41 (units -> .)
    {               reduce using rule 41 (units -> .)
    (               reduce using rule 41 (units -> .)
    INTEGER         reduce using rule 41 (units -> .)
    FLOAT           reduce using rule 41 (units -> .)
    STRING          reduce using rule 41 (units -> .)

    units                          shift and go to state 73

state 36

    (8) declaration -> TYPE . inits ;
    (81) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (10) inits -> . inits , init
    (11) inits -> . init
    (12) init -> . ID = expression

    ID              shift and go to state 76

    init                           shift and go to state 74
    inits                          shift and go to state 75

state 37

    (53) expression -> ID .
    (75) expression -> ID . ( expr_list_or_empty )
    (76) expression -> ID . ( error )

    +               reduce using rule 53 (expression -> ID .)
    -               reduce using rule 53 (expression -> ID .)
    *               reduce using rule 53 (expression -> ID .)
    /               reduce using rule 53 (expression -> ID .)
    %               reduce using rule 53 (expression -> ID .)
    |               reduce using rule 53 (expression -> ID .)
    &               reduce using rule 53 (expression -> ID .)
    ^               reduce using rule 53 (expression -> ID .)
    AND             reduce using rule 53 (expression -> ID .)
    OR              reduce using rule 53 (expression -> ID .)
    SHL             reduce using rule 53 (expression -> ID .)
    SHR             reduce using rule 53 (expression -> ID .)
    EQ              reduce using rule 53 (expression -> ID .)
    NEQ             reduce using rule 53 (expression -> ID .)
    >               reduce using rule 53 (expression -> ID .)
    <               reduce using rule 53 (expression -> ID .)
    LE              reduce using rule 53 (expression -> ID .)
    GE              reduce using rule 53 (expression -> ID .)
    ;               reduce using rule 53 (expression -> ID .)
    ,               reduce using rule 53 (expression -> ID .)
    )               reduce using rule 53 (expression -> ID .)
    (               shift and go to state 47


state 38

    (37) return_instr -> RETURN expression . ;
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    ;               shift and go to state 77
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 39

    (26) print_instr -> PRINT expr_list . ;
    (79) expr_list -> expr_list . , expression

    ;               shift and go to state 78
    ,               shift and go to state 79


state 40

    (27) print_instr -> PRINT error . ;

    ;               shift and go to state 80


state 41

    (80) expr_list -> expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    ;               reduce using rule 80 (expr_list -> expression .)
    ,               reduce using rule 80 (expr_list -> expression .)
    )               reduce using rule 80 (expr_list -> expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 42

    (34) while_instr -> WHILE ( . condition ) instruction
    (35) while_instr -> WHILE ( . error ) instruction
    (46) condition -> . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    error           shift and go to state 82
    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    expression                     shift and go to state 83
    condition                      shift and go to state 81

state 43

    (74) expression -> ( error . )

    )               shift and go to state 84


state 44

    (73) expression -> ( expression . )
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    )               shift and go to state 85
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 45

    (36) repeat_instr -> REPEAT instructions . UNTIL condition ;

    UNTIL           shift and go to state 86


state 46

    (13) instructions -> instruction . instructions
    (14) instructions -> instruction .
    (13) instructions -> . instruction instructions
    (14) instructions -> . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    UNTIL           reduce using rule 14 (instructions -> instruction .)
    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 46
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 22
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    break_instr                    shift and go to state 27
    while_instr                    shift and go to state 16
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 11
    instructions                   shift and go to state 87

state 47

    (75) expression -> ID ( . expr_list_or_empty )
    (76) expression -> ID ( . error )
    (77) expr_list_or_empty -> . expr_list
    (78) expr_list_or_empty -> .
    (79) expr_list -> . expr_list , expression
    (80) expr_list -> . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    error           shift and go to state 90
    )               reduce using rule 78 (expr_list_or_empty -> .)
    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    expr_list_or_empty             shift and go to state 89
    string                         shift and go to state 20
    expr_list                      shift and go to state 88
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 41
    const                          shift and go to state 13

state 48

    (28) labeled_instr -> ID : . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 91
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    break_instr                    shift and go to state 27
    labeled_instr                  shift and go to state 22
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 11

state 49

    (29) assignment -> ID = . expression ;
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 92

state 50

    (30) choice_instr -> IF ( . condition ) instruction
    (31) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (32) choice_instr -> IF ( . error ) instruction
    (33) choice_instr -> IF ( . error ) instruction ELSE instruction
    (46) condition -> . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    error           shift and go to state 94
    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    expression                     shift and go to state 83
    condition                      shift and go to state 93

state 51

    (39) break_instr -> BREAK ; .

    PRINT           reduce using rule 39 (break_instr -> BREAK ; .)
    ID              reduce using rule 39 (break_instr -> BREAK ; .)
    IF              reduce using rule 39 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 39 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 39 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 39 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 39 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 39 (break_instr -> BREAK ; .)
    {               reduce using rule 39 (break_instr -> BREAK ; .)
    (               reduce using rule 39 (break_instr -> BREAK ; .)
    INTEGER         reduce using rule 39 (break_instr -> BREAK ; .)
    FLOAT           reduce using rule 39 (break_instr -> BREAK ; .)
    STRING          reduce using rule 39 (break_instr -> BREAK ; .)
    UNTIL           reduce using rule 39 (break_instr -> BREAK ; .)
    }               reduce using rule 39 (break_instr -> BREAK ; .)
    TYPE            reduce using rule 39 (break_instr -> BREAK ; .)
    error           reduce using rule 39 (break_instr -> BREAK ; .)
    $end            reduce using rule 39 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 39 (break_instr -> BREAK ; .)


state 52

    (38) continue_instr -> CONTINUE ; .

    TYPE            reduce using rule 38 (continue_instr -> CONTINUE ; .)
    error           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 38 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 38 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 38 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 38 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 38 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 38 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 38 (continue_instr -> CONTINUE ; .)
    INTEGER         reduce using rule 38 (continue_instr -> CONTINUE ; .)
    FLOAT           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 38 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 38 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 38 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 38 (continue_instr -> CONTINUE ; .)


state 53

    (63) expression -> expression AND . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 95

state 54

    (66) expression -> expression SHR . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 96

state 55

    (71) expression -> expression LE . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 97

state 56

    (59) expression -> expression % . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 98

state 57

    (61) expression -> expression & . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 99

state 58

    (70) expression -> expression < . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 100

state 59

    (65) expression -> expression SHL . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 101

state 60

    (55) expression -> expression + . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 102

state 61

    (57) expression -> expression * . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 103

state 62

    (56) expression -> expression - . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 104

state 63

    (58) expression -> expression / . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 105

state 64

    (64) expression -> expression OR . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 106

state 65

    (67) expression -> expression EQ . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 107

state 66

    (69) expression -> expression > . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 108

state 67

    (72) expression -> expression GE . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 109

state 68

    (25) instruction -> expression ; .

    TYPE            reduce using rule 25 (instruction -> expression ; .)
    error           reduce using rule 25 (instruction -> expression ; .)
    PRINT           reduce using rule 25 (instruction -> expression ; .)
    ID              reduce using rule 25 (instruction -> expression ; .)
    IF              reduce using rule 25 (instruction -> expression ; .)
    WHILE           reduce using rule 25 (instruction -> expression ; .)
    REPEAT          reduce using rule 25 (instruction -> expression ; .)
    RETURN          reduce using rule 25 (instruction -> expression ; .)
    BREAK           reduce using rule 25 (instruction -> expression ; .)
    CONTINUE        reduce using rule 25 (instruction -> expression ; .)
    {               reduce using rule 25 (instruction -> expression ; .)
    (               reduce using rule 25 (instruction -> expression ; .)
    INTEGER         reduce using rule 25 (instruction -> expression ; .)
    FLOAT           reduce using rule 25 (instruction -> expression ; .)
    STRING          reduce using rule 25 (instruction -> expression ; .)
    $end            reduce using rule 25 (instruction -> expression ; .)
    UNTIL           reduce using rule 25 (instruction -> expression ; .)
    }               reduce using rule 25 (instruction -> expression ; .)
    ELSE            reduce using rule 25 (instruction -> expression ; .)


state 69

    (68) expression -> expression NEQ . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 110

state 70

    (60) expression -> expression | . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 111

state 71

    (62) expression -> expression ^ . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 112

state 72

    (9) declaration -> error ; .

    TYPE            reduce using rule 9 (declaration -> error ; .)
    error           reduce using rule 9 (declaration -> error ; .)
    PRINT           reduce using rule 9 (declaration -> error ; .)
    ID              reduce using rule 9 (declaration -> error ; .)
    IF              reduce using rule 9 (declaration -> error ; .)
    WHILE           reduce using rule 9 (declaration -> error ; .)
    REPEAT          reduce using rule 9 (declaration -> error ; .)
    RETURN          reduce using rule 9 (declaration -> error ; .)
    BREAK           reduce using rule 9 (declaration -> error ; .)
    CONTINUE        reduce using rule 9 (declaration -> error ; .)
    {               reduce using rule 9 (declaration -> error ; .)
    (               reduce using rule 9 (declaration -> error ; .)
    INTEGER         reduce using rule 9 (declaration -> error ; .)
    FLOAT           reduce using rule 9 (declaration -> error ; .)
    STRING          reduce using rule 9 (declaration -> error ; .)
    $end            reduce using rule 9 (declaration -> error ; .)
    }               reduce using rule 9 (declaration -> error ; .)


state 73

    (45) compound_instr -> { units . }
    (40) units -> units . unit
    (42) unit -> . declaration
    (43) unit -> . instruction
    (44) unit -> .
    (8) declaration -> . TYPE inits ;
    (9) declaration -> . error ;
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    }               shift and go to state 116
    TYPE            shift and go to state 117
    error           shift and go to state 34
    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

  ! }               [ reduce using rule 44 (unit -> .) ]
  ! TYPE            [ reduce using rule 44 (unit -> .) ]
  ! error           [ reduce using rule 44 (unit -> .) ]
  ! PRINT           [ reduce using rule 44 (unit -> .) ]
  ! ID              [ reduce using rule 44 (unit -> .) ]
  ! IF              [ reduce using rule 44 (unit -> .) ]
  ! WHILE           [ reduce using rule 44 (unit -> .) ]
  ! REPEAT          [ reduce using rule 44 (unit -> .) ]
  ! RETURN          [ reduce using rule 44 (unit -> .) ]
  ! BREAK           [ reduce using rule 44 (unit -> .) ]
  ! CONTINUE        [ reduce using rule 44 (unit -> .) ]
  ! {               [ reduce using rule 44 (unit -> .) ]
  ! (               [ reduce using rule 44 (unit -> .) ]
  ! INTEGER         [ reduce using rule 44 (unit -> .) ]
  ! FLOAT           [ reduce using rule 44 (unit -> .) ]
  ! STRING          [ reduce using rule 44 (unit -> .) ]

    float                          shift and go to state 5
    choice_instr                   shift and go to state 6
    repeat_instr                   shift and go to state 11
    return_instr                   shift and go to state 12
    const                          shift and go to state 13
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    unit                           shift and go to state 113
    string                         shift and go to state 20
    assignment                     shift and go to state 21
    labeled_instr                  shift and go to state 22
    compound_instr                 shift and go to state 23
    declaration                    shift and go to state 114
    integer                        shift and go to state 8
    break_instr                    shift and go to state 27
    instruction                    shift and go to state 115
    print_instr                    shift and go to state 31
    expression                     shift and go to state 33

state 74

    (11) inits -> init .

    ;               reduce using rule 11 (inits -> init .)
    ,               reduce using rule 11 (inits -> init .)


state 75

    (8) declaration -> TYPE inits . ;
    (10) inits -> inits . , init

    ;               shift and go to state 118
    ,               shift and go to state 119


state 76

    (81) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (12) init -> ID . = expression

    (               shift and go to state 120
    =               shift and go to state 121


state 77

    (37) return_instr -> RETURN expression ; .

    TYPE            reduce using rule 37 (return_instr -> RETURN expression ; .)
    error           reduce using rule 37 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 37 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 37 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 37 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 37 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 37 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 37 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 37 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 37 (return_instr -> RETURN expression ; .)
    {               reduce using rule 37 (return_instr -> RETURN expression ; .)
    (               reduce using rule 37 (return_instr -> RETURN expression ; .)
    INTEGER         reduce using rule 37 (return_instr -> RETURN expression ; .)
    FLOAT           reduce using rule 37 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 37 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 37 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 37 (return_instr -> RETURN expression ; .)
    }               reduce using rule 37 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 37 (return_instr -> RETURN expression ; .)


state 78

    (26) print_instr -> PRINT expr_list ; .

    PRINT           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    ID              reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    IF              reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    WHILE           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    REPEAT          reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    RETURN          reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    BREAK           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    {               reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    (               reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    INTEGER         reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    FLOAT           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    STRING          reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    UNTIL           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    TYPE            reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    error           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    $end            reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    }               reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    ELSE            reduce using rule 26 (print_instr -> PRINT expr_list ; .)


state 79

    (79) expr_list -> expr_list , . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 122
    const                          shift and go to state 13

state 80

    (27) print_instr -> PRINT error ; .

    PRINT           reduce using rule 27 (print_instr -> PRINT error ; .)
    ID              reduce using rule 27 (print_instr -> PRINT error ; .)
    IF              reduce using rule 27 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 27 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 27 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 27 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 27 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 27 (print_instr -> PRINT error ; .)
    {               reduce using rule 27 (print_instr -> PRINT error ; .)
    (               reduce using rule 27 (print_instr -> PRINT error ; .)
    INTEGER         reduce using rule 27 (print_instr -> PRINT error ; .)
    FLOAT           reduce using rule 27 (print_instr -> PRINT error ; .)
    STRING          reduce using rule 27 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 27 (print_instr -> PRINT error ; .)
    TYPE            reduce using rule 27 (print_instr -> PRINT error ; .)
    error           reduce using rule 27 (print_instr -> PRINT error ; .)
    $end            reduce using rule 27 (print_instr -> PRINT error ; .)
    }               reduce using rule 27 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 27 (print_instr -> PRINT error ; .)


state 81

    (34) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 123


state 82

    (35) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 124


state 83

    (46) condition -> expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    )               reduce using rule 46 (condition -> expression .)
    ;               reduce using rule 46 (condition -> expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 84

    (74) expression -> ( error ) .

    +               reduce using rule 74 (expression -> ( error ) .)
    -               reduce using rule 74 (expression -> ( error ) .)
    *               reduce using rule 74 (expression -> ( error ) .)
    /               reduce using rule 74 (expression -> ( error ) .)
    %               reduce using rule 74 (expression -> ( error ) .)
    |               reduce using rule 74 (expression -> ( error ) .)
    &               reduce using rule 74 (expression -> ( error ) .)
    ^               reduce using rule 74 (expression -> ( error ) .)
    AND             reduce using rule 74 (expression -> ( error ) .)
    OR              reduce using rule 74 (expression -> ( error ) .)
    SHL             reduce using rule 74 (expression -> ( error ) .)
    SHR             reduce using rule 74 (expression -> ( error ) .)
    EQ              reduce using rule 74 (expression -> ( error ) .)
    NEQ             reduce using rule 74 (expression -> ( error ) .)
    >               reduce using rule 74 (expression -> ( error ) .)
    <               reduce using rule 74 (expression -> ( error ) .)
    LE              reduce using rule 74 (expression -> ( error ) .)
    GE              reduce using rule 74 (expression -> ( error ) .)
    ;               reduce using rule 74 (expression -> ( error ) .)
    ,               reduce using rule 74 (expression -> ( error ) .)
    )               reduce using rule 74 (expression -> ( error ) .)


state 85

    (73) expression -> ( expression ) .

    +               reduce using rule 73 (expression -> ( expression ) .)
    -               reduce using rule 73 (expression -> ( expression ) .)
    *               reduce using rule 73 (expression -> ( expression ) .)
    /               reduce using rule 73 (expression -> ( expression ) .)
    %               reduce using rule 73 (expression -> ( expression ) .)
    |               reduce using rule 73 (expression -> ( expression ) .)
    &               reduce using rule 73 (expression -> ( expression ) .)
    ^               reduce using rule 73 (expression -> ( expression ) .)
    AND             reduce using rule 73 (expression -> ( expression ) .)
    OR              reduce using rule 73 (expression -> ( expression ) .)
    SHL             reduce using rule 73 (expression -> ( expression ) .)
    SHR             reduce using rule 73 (expression -> ( expression ) .)
    EQ              reduce using rule 73 (expression -> ( expression ) .)
    NEQ             reduce using rule 73 (expression -> ( expression ) .)
    >               reduce using rule 73 (expression -> ( expression ) .)
    <               reduce using rule 73 (expression -> ( expression ) .)
    LE              reduce using rule 73 (expression -> ( expression ) .)
    GE              reduce using rule 73 (expression -> ( expression ) .)
    ;               reduce using rule 73 (expression -> ( expression ) .)
    ,               reduce using rule 73 (expression -> ( expression ) .)
    )               reduce using rule 73 (expression -> ( expression ) .)


state 86

    (36) repeat_instr -> REPEAT instructions UNTIL . condition ;
    (46) condition -> . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 83
    condition                      shift and go to state 125

state 87

    (13) instructions -> instruction instructions .

    UNTIL           reduce using rule 13 (instructions -> instruction instructions .)


state 88

    (77) expr_list_or_empty -> expr_list .
    (79) expr_list -> expr_list . , expression

    )               reduce using rule 77 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 79


state 89

    (75) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 126


state 90

    (76) expression -> ID ( error . )

    )               shift and go to state 127


state 91

    (28) labeled_instr -> ID : instruction .

    TYPE            reduce using rule 28 (labeled_instr -> ID : instruction .)
    error           reduce using rule 28 (labeled_instr -> ID : instruction .)
    PRINT           reduce using rule 28 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 28 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 28 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 28 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 28 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 28 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 28 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 28 (labeled_instr -> ID : instruction .)
    {               reduce using rule 28 (labeled_instr -> ID : instruction .)
    (               reduce using rule 28 (labeled_instr -> ID : instruction .)
    INTEGER         reduce using rule 28 (labeled_instr -> ID : instruction .)
    FLOAT           reduce using rule 28 (labeled_instr -> ID : instruction .)
    STRING          reduce using rule 28 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 28 (labeled_instr -> ID : instruction .)
    UNTIL           reduce using rule 28 (labeled_instr -> ID : instruction .)
    }               reduce using rule 28 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 28 (labeled_instr -> ID : instruction .)


state 92

    (29) assignment -> ID = expression . ;
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    ;               shift and go to state 128
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 93

    (30) choice_instr -> IF ( condition . ) instruction
    (31) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 129


state 94

    (32) choice_instr -> IF ( error . ) instruction
    (33) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 130


state 95

    (63) expression -> expression AND expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    AND             reduce using rule 63 (expression -> expression AND expression .)
    OR              reduce using rule 63 (expression -> expression AND expression .)
    ;               reduce using rule 63 (expression -> expression AND expression .)
    ,               reduce using rule 63 (expression -> expression AND expression .)
    )               reduce using rule 63 (expression -> expression AND expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67

  ! +               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]


state 96

    (66) expression -> expression SHR expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 66 (expression -> expression SHR expression .)
    &               reduce using rule 66 (expression -> expression SHR expression .)
    ^               reduce using rule 66 (expression -> expression SHR expression .)
    AND             reduce using rule 66 (expression -> expression SHR expression .)
    OR              reduce using rule 66 (expression -> expression SHR expression .)
    SHL             reduce using rule 66 (expression -> expression SHR expression .)
    SHR             reduce using rule 66 (expression -> expression SHR expression .)
    EQ              reduce using rule 66 (expression -> expression SHR expression .)
    NEQ             reduce using rule 66 (expression -> expression SHR expression .)
    >               reduce using rule 66 (expression -> expression SHR expression .)
    <               reduce using rule 66 (expression -> expression SHR expression .)
    LE              reduce using rule 66 (expression -> expression SHR expression .)
    GE              reduce using rule 66 (expression -> expression SHR expression .)
    ;               reduce using rule 66 (expression -> expression SHR expression .)
    ,               reduce using rule 66 (expression -> expression SHR expression .)
    )               reduce using rule 66 (expression -> expression SHR expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56

  ! +               [ reduce using rule 66 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 66 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 66 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 66 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! SHL             [ shift and go to state 59 ]
  ! SHR             [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 97

    (71) expression -> expression LE expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 71 (expression -> expression LE expression .)
    &               reduce using rule 71 (expression -> expression LE expression .)
    ^               reduce using rule 71 (expression -> expression LE expression .)
    AND             reduce using rule 71 (expression -> expression LE expression .)
    OR              reduce using rule 71 (expression -> expression LE expression .)
    EQ              reduce using rule 71 (expression -> expression LE expression .)
    NEQ             reduce using rule 71 (expression -> expression LE expression .)
    >               reduce using rule 71 (expression -> expression LE expression .)
    <               reduce using rule 71 (expression -> expression LE expression .)
    LE              reduce using rule 71 (expression -> expression LE expression .)
    GE              reduce using rule 71 (expression -> expression LE expression .)
    ;               reduce using rule 71 (expression -> expression LE expression .)
    ,               reduce using rule 71 (expression -> expression LE expression .)
    )               reduce using rule 71 (expression -> expression LE expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    SHL             shift and go to state 59
    SHR             shift and go to state 54

  ! +               [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 98

    (59) expression -> expression % expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    +               reduce using rule 59 (expression -> expression % expression .)
    -               reduce using rule 59 (expression -> expression % expression .)
    *               reduce using rule 59 (expression -> expression % expression .)
    /               reduce using rule 59 (expression -> expression % expression .)
    %               reduce using rule 59 (expression -> expression % expression .)
    |               reduce using rule 59 (expression -> expression % expression .)
    &               reduce using rule 59 (expression -> expression % expression .)
    ^               reduce using rule 59 (expression -> expression % expression .)
    AND             reduce using rule 59 (expression -> expression % expression .)
    OR              reduce using rule 59 (expression -> expression % expression .)
    SHL             reduce using rule 59 (expression -> expression % expression .)
    SHR             reduce using rule 59 (expression -> expression % expression .)
    EQ              reduce using rule 59 (expression -> expression % expression .)
    NEQ             reduce using rule 59 (expression -> expression % expression .)
    >               reduce using rule 59 (expression -> expression % expression .)
    <               reduce using rule 59 (expression -> expression % expression .)
    LE              reduce using rule 59 (expression -> expression % expression .)
    GE              reduce using rule 59 (expression -> expression % expression .)
    ;               reduce using rule 59 (expression -> expression % expression .)
    ,               reduce using rule 59 (expression -> expression % expression .)
    )               reduce using rule 59 (expression -> expression % expression .)

  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 63 ]
  ! %               [ shift and go to state 56 ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! SHL             [ shift and go to state 59 ]
  ! SHR             [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 99

    (61) expression -> expression & expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 61 (expression -> expression & expression .)
    &               reduce using rule 61 (expression -> expression & expression .)
    ^               reduce using rule 61 (expression -> expression & expression .)
    AND             reduce using rule 61 (expression -> expression & expression .)
    OR              reduce using rule 61 (expression -> expression & expression .)
    ;               reduce using rule 61 (expression -> expression & expression .)
    ,               reduce using rule 61 (expression -> expression & expression .)
    )               reduce using rule 61 (expression -> expression & expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67

  ! +               [ reduce using rule 61 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 61 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 61 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 61 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 61 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 61 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]


state 100

    (70) expression -> expression < expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 70 (expression -> expression < expression .)
    &               reduce using rule 70 (expression -> expression < expression .)
    ^               reduce using rule 70 (expression -> expression < expression .)
    AND             reduce using rule 70 (expression -> expression < expression .)
    OR              reduce using rule 70 (expression -> expression < expression .)
    EQ              reduce using rule 70 (expression -> expression < expression .)
    NEQ             reduce using rule 70 (expression -> expression < expression .)
    >               reduce using rule 70 (expression -> expression < expression .)
    <               reduce using rule 70 (expression -> expression < expression .)
    LE              reduce using rule 70 (expression -> expression < expression .)
    GE              reduce using rule 70 (expression -> expression < expression .)
    ;               reduce using rule 70 (expression -> expression < expression .)
    ,               reduce using rule 70 (expression -> expression < expression .)
    )               reduce using rule 70 (expression -> expression < expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    SHL             shift and go to state 59
    SHR             shift and go to state 54

  ! +               [ reduce using rule 70 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 70 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 70 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 70 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 70 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 70 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 70 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 101

    (65) expression -> expression SHL expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 65 (expression -> expression SHL expression .)
    &               reduce using rule 65 (expression -> expression SHL expression .)
    ^               reduce using rule 65 (expression -> expression SHL expression .)
    AND             reduce using rule 65 (expression -> expression SHL expression .)
    OR              reduce using rule 65 (expression -> expression SHL expression .)
    SHL             reduce using rule 65 (expression -> expression SHL expression .)
    SHR             reduce using rule 65 (expression -> expression SHL expression .)
    EQ              reduce using rule 65 (expression -> expression SHL expression .)
    NEQ             reduce using rule 65 (expression -> expression SHL expression .)
    >               reduce using rule 65 (expression -> expression SHL expression .)
    <               reduce using rule 65 (expression -> expression SHL expression .)
    LE              reduce using rule 65 (expression -> expression SHL expression .)
    GE              reduce using rule 65 (expression -> expression SHL expression .)
    ;               reduce using rule 65 (expression -> expression SHL expression .)
    ,               reduce using rule 65 (expression -> expression SHL expression .)
    )               reduce using rule 65 (expression -> expression SHL expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56

  ! +               [ reduce using rule 65 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 65 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 65 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 65 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 65 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! SHL             [ shift and go to state 59 ]
  ! SHR             [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 102

    (55) expression -> expression + expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    +               reduce using rule 55 (expression -> expression + expression .)
    -               reduce using rule 55 (expression -> expression + expression .)
    |               reduce using rule 55 (expression -> expression + expression .)
    &               reduce using rule 55 (expression -> expression + expression .)
    ^               reduce using rule 55 (expression -> expression + expression .)
    AND             reduce using rule 55 (expression -> expression + expression .)
    OR              reduce using rule 55 (expression -> expression + expression .)
    SHL             reduce using rule 55 (expression -> expression + expression .)
    SHR             reduce using rule 55 (expression -> expression + expression .)
    EQ              reduce using rule 55 (expression -> expression + expression .)
    NEQ             reduce using rule 55 (expression -> expression + expression .)
    >               reduce using rule 55 (expression -> expression + expression .)
    <               reduce using rule 55 (expression -> expression + expression .)
    LE              reduce using rule 55 (expression -> expression + expression .)
    GE              reduce using rule 55 (expression -> expression + expression .)
    ;               reduce using rule 55 (expression -> expression + expression .)
    ,               reduce using rule 55 (expression -> expression + expression .)
    )               reduce using rule 55 (expression -> expression + expression .)
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56

  ! *               [ reduce using rule 55 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 55 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 62 ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! SHL             [ shift and go to state 59 ]
  ! SHR             [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 103

    (57) expression -> expression * expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    +               reduce using rule 57 (expression -> expression * expression .)
    -               reduce using rule 57 (expression -> expression * expression .)
    *               reduce using rule 57 (expression -> expression * expression .)
    /               reduce using rule 57 (expression -> expression * expression .)
    %               reduce using rule 57 (expression -> expression * expression .)
    |               reduce using rule 57 (expression -> expression * expression .)
    &               reduce using rule 57 (expression -> expression * expression .)
    ^               reduce using rule 57 (expression -> expression * expression .)
    AND             reduce using rule 57 (expression -> expression * expression .)
    OR              reduce using rule 57 (expression -> expression * expression .)
    SHL             reduce using rule 57 (expression -> expression * expression .)
    SHR             reduce using rule 57 (expression -> expression * expression .)
    EQ              reduce using rule 57 (expression -> expression * expression .)
    NEQ             reduce using rule 57 (expression -> expression * expression .)
    >               reduce using rule 57 (expression -> expression * expression .)
    <               reduce using rule 57 (expression -> expression * expression .)
    LE              reduce using rule 57 (expression -> expression * expression .)
    GE              reduce using rule 57 (expression -> expression * expression .)
    ;               reduce using rule 57 (expression -> expression * expression .)
    ,               reduce using rule 57 (expression -> expression * expression .)
    )               reduce using rule 57 (expression -> expression * expression .)

  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 63 ]
  ! %               [ shift and go to state 56 ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! SHL             [ shift and go to state 59 ]
  ! SHR             [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 104

    (56) expression -> expression - expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    +               reduce using rule 56 (expression -> expression - expression .)
    -               reduce using rule 56 (expression -> expression - expression .)
    |               reduce using rule 56 (expression -> expression - expression .)
    &               reduce using rule 56 (expression -> expression - expression .)
    ^               reduce using rule 56 (expression -> expression - expression .)
    AND             reduce using rule 56 (expression -> expression - expression .)
    OR              reduce using rule 56 (expression -> expression - expression .)
    SHL             reduce using rule 56 (expression -> expression - expression .)
    SHR             reduce using rule 56 (expression -> expression - expression .)
    EQ              reduce using rule 56 (expression -> expression - expression .)
    NEQ             reduce using rule 56 (expression -> expression - expression .)
    >               reduce using rule 56 (expression -> expression - expression .)
    <               reduce using rule 56 (expression -> expression - expression .)
    LE              reduce using rule 56 (expression -> expression - expression .)
    GE              reduce using rule 56 (expression -> expression - expression .)
    ;               reduce using rule 56 (expression -> expression - expression .)
    ,               reduce using rule 56 (expression -> expression - expression .)
    )               reduce using rule 56 (expression -> expression - expression .)
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56

  ! *               [ reduce using rule 56 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 56 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 62 ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! SHL             [ shift and go to state 59 ]
  ! SHR             [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 105

    (58) expression -> expression / expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    +               reduce using rule 58 (expression -> expression / expression .)
    -               reduce using rule 58 (expression -> expression / expression .)
    *               reduce using rule 58 (expression -> expression / expression .)
    /               reduce using rule 58 (expression -> expression / expression .)
    %               reduce using rule 58 (expression -> expression / expression .)
    |               reduce using rule 58 (expression -> expression / expression .)
    &               reduce using rule 58 (expression -> expression / expression .)
    ^               reduce using rule 58 (expression -> expression / expression .)
    AND             reduce using rule 58 (expression -> expression / expression .)
    OR              reduce using rule 58 (expression -> expression / expression .)
    SHL             reduce using rule 58 (expression -> expression / expression .)
    SHR             reduce using rule 58 (expression -> expression / expression .)
    EQ              reduce using rule 58 (expression -> expression / expression .)
    NEQ             reduce using rule 58 (expression -> expression / expression .)
    >               reduce using rule 58 (expression -> expression / expression .)
    <               reduce using rule 58 (expression -> expression / expression .)
    LE              reduce using rule 58 (expression -> expression / expression .)
    GE              reduce using rule 58 (expression -> expression / expression .)
    ;               reduce using rule 58 (expression -> expression / expression .)
    ,               reduce using rule 58 (expression -> expression / expression .)
    )               reduce using rule 58 (expression -> expression / expression .)

  ! +               [ shift and go to state 60 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 63 ]
  ! %               [ shift and go to state 56 ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! SHL             [ shift and go to state 59 ]
  ! SHR             [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 106

    (64) expression -> expression OR expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    OR              reduce using rule 64 (expression -> expression OR expression .)
    ;               reduce using rule 64 (expression -> expression OR expression .)
    ,               reduce using rule 64 (expression -> expression OR expression .)
    )               reduce using rule 64 (expression -> expression OR expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67

  ! +               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 64 ]


state 107

    (67) expression -> expression EQ expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 67 (expression -> expression EQ expression .)
    &               reduce using rule 67 (expression -> expression EQ expression .)
    ^               reduce using rule 67 (expression -> expression EQ expression .)
    AND             reduce using rule 67 (expression -> expression EQ expression .)
    OR              reduce using rule 67 (expression -> expression EQ expression .)
    EQ              reduce using rule 67 (expression -> expression EQ expression .)
    NEQ             reduce using rule 67 (expression -> expression EQ expression .)
    >               reduce using rule 67 (expression -> expression EQ expression .)
    <               reduce using rule 67 (expression -> expression EQ expression .)
    LE              reduce using rule 67 (expression -> expression EQ expression .)
    GE              reduce using rule 67 (expression -> expression EQ expression .)
    ;               reduce using rule 67 (expression -> expression EQ expression .)
    ,               reduce using rule 67 (expression -> expression EQ expression .)
    )               reduce using rule 67 (expression -> expression EQ expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    SHL             shift and go to state 59
    SHR             shift and go to state 54

  ! +               [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 108

    (69) expression -> expression > expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 69 (expression -> expression > expression .)
    &               reduce using rule 69 (expression -> expression > expression .)
    ^               reduce using rule 69 (expression -> expression > expression .)
    AND             reduce using rule 69 (expression -> expression > expression .)
    OR              reduce using rule 69 (expression -> expression > expression .)
    EQ              reduce using rule 69 (expression -> expression > expression .)
    NEQ             reduce using rule 69 (expression -> expression > expression .)
    >               reduce using rule 69 (expression -> expression > expression .)
    <               reduce using rule 69 (expression -> expression > expression .)
    LE              reduce using rule 69 (expression -> expression > expression .)
    GE              reduce using rule 69 (expression -> expression > expression .)
    ;               reduce using rule 69 (expression -> expression > expression .)
    ,               reduce using rule 69 (expression -> expression > expression .)
    )               reduce using rule 69 (expression -> expression > expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    SHL             shift and go to state 59
    SHR             shift and go to state 54

  ! +               [ reduce using rule 69 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 69 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 69 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 69 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 69 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 69 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 69 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 109

    (72) expression -> expression GE expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 72 (expression -> expression GE expression .)
    &               reduce using rule 72 (expression -> expression GE expression .)
    ^               reduce using rule 72 (expression -> expression GE expression .)
    AND             reduce using rule 72 (expression -> expression GE expression .)
    OR              reduce using rule 72 (expression -> expression GE expression .)
    EQ              reduce using rule 72 (expression -> expression GE expression .)
    NEQ             reduce using rule 72 (expression -> expression GE expression .)
    >               reduce using rule 72 (expression -> expression GE expression .)
    <               reduce using rule 72 (expression -> expression GE expression .)
    LE              reduce using rule 72 (expression -> expression GE expression .)
    GE              reduce using rule 72 (expression -> expression GE expression .)
    ;               reduce using rule 72 (expression -> expression GE expression .)
    ,               reduce using rule 72 (expression -> expression GE expression .)
    )               reduce using rule 72 (expression -> expression GE expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    SHL             shift and go to state 59
    SHR             shift and go to state 54

  ! +               [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 110

    (68) expression -> expression NEQ expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 68 (expression -> expression NEQ expression .)
    &               reduce using rule 68 (expression -> expression NEQ expression .)
    ^               reduce using rule 68 (expression -> expression NEQ expression .)
    AND             reduce using rule 68 (expression -> expression NEQ expression .)
    OR              reduce using rule 68 (expression -> expression NEQ expression .)
    EQ              reduce using rule 68 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 68 (expression -> expression NEQ expression .)
    >               reduce using rule 68 (expression -> expression NEQ expression .)
    <               reduce using rule 68 (expression -> expression NEQ expression .)
    LE              reduce using rule 68 (expression -> expression NEQ expression .)
    GE              reduce using rule 68 (expression -> expression NEQ expression .)
    ;               reduce using rule 68 (expression -> expression NEQ expression .)
    ,               reduce using rule 68 (expression -> expression NEQ expression .)
    )               reduce using rule 68 (expression -> expression NEQ expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    SHL             shift and go to state 59
    SHR             shift and go to state 54

  ! +               [ reduce using rule 68 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 68 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 68 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 68 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 68 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 68 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 68 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 70 ]
  ! &               [ shift and go to state 57 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]
  ! EQ              [ shift and go to state 65 ]
  ! NEQ             [ shift and go to state 69 ]
  ! >               [ shift and go to state 66 ]
  ! <               [ shift and go to state 58 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 67 ]


state 111

    (60) expression -> expression | expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 60 (expression -> expression | expression .)
    AND             reduce using rule 60 (expression -> expression | expression .)
    OR              reduce using rule 60 (expression -> expression | expression .)
    ;               reduce using rule 60 (expression -> expression | expression .)
    ,               reduce using rule 60 (expression -> expression | expression .)
    )               reduce using rule 60 (expression -> expression | expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    &               shift and go to state 57
    ^               shift and go to state 71
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67

  ! +               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 60 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 60 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 60 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 70 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]


state 112

    (62) expression -> expression ^ expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression ^ expression .)
    ^               reduce using rule 62 (expression -> expression ^ expression .)
    AND             reduce using rule 62 (expression -> expression ^ expression .)
    OR              reduce using rule 62 (expression -> expression ^ expression .)
    ;               reduce using rule 62 (expression -> expression ^ expression .)
    ,               reduce using rule 62 (expression -> expression ^ expression .)
    )               reduce using rule 62 (expression -> expression ^ expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    &               shift and go to state 57
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67

  ! +               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 70 ]
  ! ^               [ shift and go to state 71 ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 64 ]


state 113

    (40) units -> units unit .

    }               reduce using rule 40 (units -> units unit .)
    TYPE            reduce using rule 40 (units -> units unit .)
    error           reduce using rule 40 (units -> units unit .)
    PRINT           reduce using rule 40 (units -> units unit .)
    ID              reduce using rule 40 (units -> units unit .)
    IF              reduce using rule 40 (units -> units unit .)
    WHILE           reduce using rule 40 (units -> units unit .)
    REPEAT          reduce using rule 40 (units -> units unit .)
    RETURN          reduce using rule 40 (units -> units unit .)
    BREAK           reduce using rule 40 (units -> units unit .)
    CONTINUE        reduce using rule 40 (units -> units unit .)
    {               reduce using rule 40 (units -> units unit .)
    (               reduce using rule 40 (units -> units unit .)
    INTEGER         reduce using rule 40 (units -> units unit .)
    FLOAT           reduce using rule 40 (units -> units unit .)
    STRING          reduce using rule 40 (units -> units unit .)


state 114

    (42) unit -> declaration .

    }               reduce using rule 42 (unit -> declaration .)
    TYPE            reduce using rule 42 (unit -> declaration .)
    error           reduce using rule 42 (unit -> declaration .)
    PRINT           reduce using rule 42 (unit -> declaration .)
    ID              reduce using rule 42 (unit -> declaration .)
    IF              reduce using rule 42 (unit -> declaration .)
    WHILE           reduce using rule 42 (unit -> declaration .)
    REPEAT          reduce using rule 42 (unit -> declaration .)
    RETURN          reduce using rule 42 (unit -> declaration .)
    BREAK           reduce using rule 42 (unit -> declaration .)
    CONTINUE        reduce using rule 42 (unit -> declaration .)
    {               reduce using rule 42 (unit -> declaration .)
    (               reduce using rule 42 (unit -> declaration .)
    INTEGER         reduce using rule 42 (unit -> declaration .)
    FLOAT           reduce using rule 42 (unit -> declaration .)
    STRING          reduce using rule 42 (unit -> declaration .)


state 115

    (43) unit -> instruction .

    }               reduce using rule 43 (unit -> instruction .)
    TYPE            reduce using rule 43 (unit -> instruction .)
    error           reduce using rule 43 (unit -> instruction .)
    PRINT           reduce using rule 43 (unit -> instruction .)
    ID              reduce using rule 43 (unit -> instruction .)
    IF              reduce using rule 43 (unit -> instruction .)
    WHILE           reduce using rule 43 (unit -> instruction .)
    REPEAT          reduce using rule 43 (unit -> instruction .)
    RETURN          reduce using rule 43 (unit -> instruction .)
    BREAK           reduce using rule 43 (unit -> instruction .)
    CONTINUE        reduce using rule 43 (unit -> instruction .)
    {               reduce using rule 43 (unit -> instruction .)
    (               reduce using rule 43 (unit -> instruction .)
    INTEGER         reduce using rule 43 (unit -> instruction .)
    FLOAT           reduce using rule 43 (unit -> instruction .)
    STRING          reduce using rule 43 (unit -> instruction .)


state 116

    (45) compound_instr -> { units } .

    TYPE            reduce using rule 45 (compound_instr -> { units } .)
    error           reduce using rule 45 (compound_instr -> { units } .)
    PRINT           reduce using rule 45 (compound_instr -> { units } .)
    ID              reduce using rule 45 (compound_instr -> { units } .)
    IF              reduce using rule 45 (compound_instr -> { units } .)
    WHILE           reduce using rule 45 (compound_instr -> { units } .)
    REPEAT          reduce using rule 45 (compound_instr -> { units } .)
    RETURN          reduce using rule 45 (compound_instr -> { units } .)
    BREAK           reduce using rule 45 (compound_instr -> { units } .)
    CONTINUE        reduce using rule 45 (compound_instr -> { units } .)
    {               reduce using rule 45 (compound_instr -> { units } .)
    (               reduce using rule 45 (compound_instr -> { units } .)
    INTEGER         reduce using rule 45 (compound_instr -> { units } .)
    FLOAT           reduce using rule 45 (compound_instr -> { units } .)
    STRING          reduce using rule 45 (compound_instr -> { units } .)
    $end            reduce using rule 45 (compound_instr -> { units } .)
    UNTIL           reduce using rule 45 (compound_instr -> { units } .)
    }               reduce using rule 45 (compound_instr -> { units } .)
    ELSE            reduce using rule 45 (compound_instr -> { units } .)


state 117

    (8) declaration -> TYPE . inits ;
    (10) inits -> . inits , init
    (11) inits -> . init
    (12) init -> . ID = expression

    ID              shift and go to state 131

    init                           shift and go to state 74
    inits                          shift and go to state 75

state 118

    (8) declaration -> TYPE inits ; .

    TYPE            reduce using rule 8 (declaration -> TYPE inits ; .)
    error           reduce using rule 8 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 8 (declaration -> TYPE inits ; .)
    ID              reduce using rule 8 (declaration -> TYPE inits ; .)
    IF              reduce using rule 8 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 8 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 8 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 8 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 8 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 8 (declaration -> TYPE inits ; .)
    {               reduce using rule 8 (declaration -> TYPE inits ; .)
    (               reduce using rule 8 (declaration -> TYPE inits ; .)
    INTEGER         reduce using rule 8 (declaration -> TYPE inits ; .)
    FLOAT           reduce using rule 8 (declaration -> TYPE inits ; .)
    STRING          reduce using rule 8 (declaration -> TYPE inits ; .)
    $end            reduce using rule 8 (declaration -> TYPE inits ; .)
    }               reduce using rule 8 (declaration -> TYPE inits ; .)


state 119

    (10) inits -> inits , . init
    (12) init -> . ID = expression

    ID              shift and go to state 131

    init                           shift and go to state 132

state 120

    (81) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (82) args_list_or_empty -> . args_list
    (83) args_list_or_empty -> .
    (84) args_list -> . args_list , arg
    (85) args_list -> . arg
    (86) arg -> . TYPE ID

    )               reduce using rule 83 (args_list_or_empty -> .)
    TYPE            shift and go to state 136

    args_list_or_empty             shift and go to state 134
    arg                            shift and go to state 135
    args_list                      shift and go to state 133

state 121

    (12) init -> ID = . expression
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    const                          shift and go to state 13
    string                         shift and go to state 20
    float                          shift and go to state 5
    integer                        shift and go to state 8
    expression                     shift and go to state 137

state 122

    (79) expr_list -> expr_list , expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    ;               reduce using rule 79 (expr_list -> expr_list , expression .)
    ,               reduce using rule 79 (expr_list -> expr_list , expression .)
    )               reduce using rule 79 (expr_list -> expr_list , expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 123

    (34) while_instr -> WHILE ( condition ) . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 138
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 22
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    repeat_instr                   shift and go to state 11
    break_instr                    shift and go to state 27
    while_instr                    shift and go to state 16
    expression                     shift and go to state 33

state 124

    (35) while_instr -> WHILE ( error ) . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 139
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    break_instr                    shift and go to state 27
    labeled_instr                  shift and go to state 22
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 11

state 125

    (36) repeat_instr -> REPEAT instructions UNTIL condition . ;

    ;               shift and go to state 140


state 126

    (75) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 75 (expression -> ID ( expr_list_or_empty ) .)


state 127

    (76) expression -> ID ( error ) .

    +               reduce using rule 76 (expression -> ID ( error ) .)
    -               reduce using rule 76 (expression -> ID ( error ) .)
    *               reduce using rule 76 (expression -> ID ( error ) .)
    /               reduce using rule 76 (expression -> ID ( error ) .)
    %               reduce using rule 76 (expression -> ID ( error ) .)
    |               reduce using rule 76 (expression -> ID ( error ) .)
    &               reduce using rule 76 (expression -> ID ( error ) .)
    ^               reduce using rule 76 (expression -> ID ( error ) .)
    AND             reduce using rule 76 (expression -> ID ( error ) .)
    OR              reduce using rule 76 (expression -> ID ( error ) .)
    SHL             reduce using rule 76 (expression -> ID ( error ) .)
    SHR             reduce using rule 76 (expression -> ID ( error ) .)
    EQ              reduce using rule 76 (expression -> ID ( error ) .)
    NEQ             reduce using rule 76 (expression -> ID ( error ) .)
    >               reduce using rule 76 (expression -> ID ( error ) .)
    <               reduce using rule 76 (expression -> ID ( error ) .)
    LE              reduce using rule 76 (expression -> ID ( error ) .)
    GE              reduce using rule 76 (expression -> ID ( error ) .)
    ;               reduce using rule 76 (expression -> ID ( error ) .)
    ,               reduce using rule 76 (expression -> ID ( error ) .)
    )               reduce using rule 76 (expression -> ID ( error ) .)


state 128

    (29) assignment -> ID = expression ; .

    TYPE            reduce using rule 29 (assignment -> ID = expression ; .)
    error           reduce using rule 29 (assignment -> ID = expression ; .)
    PRINT           reduce using rule 29 (assignment -> ID = expression ; .)
    ID              reduce using rule 29 (assignment -> ID = expression ; .)
    IF              reduce using rule 29 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 29 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 29 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 29 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 29 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 29 (assignment -> ID = expression ; .)
    {               reduce using rule 29 (assignment -> ID = expression ; .)
    (               reduce using rule 29 (assignment -> ID = expression ; .)
    INTEGER         reduce using rule 29 (assignment -> ID = expression ; .)
    FLOAT           reduce using rule 29 (assignment -> ID = expression ; .)
    STRING          reduce using rule 29 (assignment -> ID = expression ; .)
    $end            reduce using rule 29 (assignment -> ID = expression ; .)
    UNTIL           reduce using rule 29 (assignment -> ID = expression ; .)
    }               reduce using rule 29 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 29 (assignment -> ID = expression ; .)


state 129

    (30) choice_instr -> IF ( condition ) . instruction
    (31) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 141
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 22
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    repeat_instr                   shift and go to state 11
    break_instr                    shift and go to state 27
    while_instr                    shift and go to state 16
    expression                     shift and go to state 33

state 130

    (32) choice_instr -> IF ( error ) . instruction
    (33) choice_instr -> IF ( error ) . instruction ELSE instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 142
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    break_instr                    shift and go to state 27
    labeled_instr                  shift and go to state 22
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 11

state 131

    (12) init -> ID . = expression

    =               shift and go to state 121


state 132

    (10) inits -> inits , init .

    ;               reduce using rule 10 (inits -> inits , init .)
    ,               reduce using rule 10 (inits -> inits , init .)


state 133

    (82) args_list_or_empty -> args_list .
    (84) args_list -> args_list . , arg

    )               reduce using rule 82 (args_list_or_empty -> args_list .)
    ,               shift and go to state 143


state 134

    (81) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 144


state 135

    (85) args_list -> arg .

    ,               reduce using rule 85 (args_list -> arg .)
    )               reduce using rule 85 (args_list -> arg .)


state 136

    (86) arg -> TYPE . ID

    ID              shift and go to state 145


state 137

    (12) init -> ID = expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . % expression
    (60) expression -> expression . | expression
    (61) expression -> expression . & expression
    (62) expression -> expression . ^ expression
    (63) expression -> expression . AND expression
    (64) expression -> expression . OR expression
    (65) expression -> expression . SHL expression
    (66) expression -> expression . SHR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NEQ expression
    (69) expression -> expression . > expression
    (70) expression -> expression . < expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    ;               reduce using rule 12 (init -> ID = expression .)
    ,               reduce using rule 12 (init -> ID = expression .)
    +               shift and go to state 60
    -               shift and go to state 62
    *               shift and go to state 61
    /               shift and go to state 63
    %               shift and go to state 56
    |               shift and go to state 70
    &               shift and go to state 57
    ^               shift and go to state 71
    AND             shift and go to state 53
    OR              shift and go to state 64
    SHL             shift and go to state 59
    SHR             shift and go to state 54
    EQ              shift and go to state 65
    NEQ             shift and go to state 69
    >               shift and go to state 66
    <               shift and go to state 58
    LE              shift and go to state 55
    GE              shift and go to state 67


state 138

    (34) while_instr -> WHILE ( condition ) instruction .

    TYPE            reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    error           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    (               reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    INTEGER         reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    FLOAT           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    UNTIL           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)


state 139

    (35) while_instr -> WHILE ( error ) instruction .

    TYPE            reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    error           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    (               reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    INTEGER         reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    FLOAT           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    STRING          reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    UNTIL           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)


state 140

    (36) repeat_instr -> REPEAT instructions UNTIL condition ; .

    TYPE            reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    error           reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    PRINT           reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ID              reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    IF              reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    WHILE           reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    REPEAT          reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    RETURN          reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    BREAK           reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    CONTINUE        reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    {               reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    (               reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    INTEGER         reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    FLOAT           reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    STRING          reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    $end            reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    UNTIL           reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    }               reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ELSE            reduce using rule 36 (repeat_instr -> REPEAT instructions UNTIL condition ; .)


state 141

    (30) choice_instr -> IF ( condition ) instruction .
    (31) choice_instr -> IF ( condition ) instruction . ELSE instruction

    TYPE            reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    error           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    PRINT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    (               reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    INTEGER         reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    FLOAT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    STRING          reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 146

  ! ELSE            [ reduce using rule 30 (choice_instr -> IF ( condition ) instruction .) ]


state 142

    (32) choice_instr -> IF ( error ) instruction .
    (33) choice_instr -> IF ( error ) instruction . ELSE instruction

    TYPE            reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    error           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    PRINT           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    (               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    INTEGER         reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    FLOAT           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    STRING          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 147

  ! ELSE            [ reduce using rule 32 (choice_instr -> IF ( error ) instruction .) ]


state 143

    (84) args_list -> args_list , . arg
    (86) arg -> . TYPE ID

    TYPE            shift and go to state 136

    arg                            shift and go to state 148

state 144

    (81) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (45) compound_instr -> . { units }

    {               shift and go to state 35

    compound_instr                 shift and go to state 149

state 145

    (86) arg -> TYPE ID .

    ,               reduce using rule 86 (arg -> TYPE ID .)
    )               reduce using rule 86 (arg -> TYPE ID .)


state 146

    (31) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 150
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    labeled_instr                  shift and go to state 22
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    repeat_instr                   shift and go to state 11
    break_instr                    shift and go to state 27
    while_instr                    shift and go to state 16
    expression                     shift and go to state 33

state 147

    (33) choice_instr -> IF ( error ) instruction ELSE . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (45) compound_instr -> . { units }
    (53) expression -> . ID
    (54) expression -> . const
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression % expression
    (60) expression -> . expression | expression
    (61) expression -> . expression & expression
    (62) expression -> . expression ^ expression
    (63) expression -> . expression AND expression
    (64) expression -> . expression OR expression
    (65) expression -> . expression SHL expression
    (66) expression -> . expression SHR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NEQ expression
    (69) expression -> . expression > expression
    (70) expression -> . expression < expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) expression -> . ( expression )
    (74) expression -> . ( error )
    (75) expression -> . ID ( expr_list_or_empty )
    (76) expression -> . ID ( error )
    (47) const -> . integer
    (48) const -> . float
    (49) const -> . string
    (50) integer -> . INTEGER
    (51) float -> . FLOAT
    (52) string -> . STRING

    PRINT           shift and go to state 9
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 19
    RETURN          shift and go to state 4
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 32
    {               shift and go to state 35
    (               shift and go to state 14
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 3
    STRING          shift and go to state 7

    return_instr                   shift and go to state 12
    float                          shift and go to state 5
    const                          shift and go to state 13
    string                         shift and go to state 20
    integer                        shift and go to state 8
    assignment                     shift and go to state 21
    instruction                    shift and go to state 151
    compound_instr                 shift and go to state 23
    continue_instr                 shift and go to state 15
    while_instr                    shift and go to state 16
    print_instr                    shift and go to state 31
    choice_instr                   shift and go to state 6
    break_instr                    shift and go to state 27
    labeled_instr                  shift and go to state 22
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 11

state 148

    (84) args_list -> args_list , arg .

    ,               reduce using rule 84 (args_list -> args_list , arg .)
    )               reduce using rule 84 (args_list -> args_list , arg .)


state 149

    (81) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    error           reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    (               reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    INTEGER         reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    FLOAT           reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    STRING          reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    $end            reduce using rule 81 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 150

    (31) choice_instr -> IF ( condition ) instruction ELSE instruction .

    TYPE            reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    error           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    (               reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    INTEGER         reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FLOAT           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 151

    (33) choice_instr -> IF ( error ) instruction ELSE instruction .

    TYPE            reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    error           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    PRINT           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    (               reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    INTEGER         reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FLOAT           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    STRING          reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for error in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 2 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 2 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 2 resolved as shift
WARNING: shift/reduce conflict for { in state 2 resolved as shift
WARNING: shift/reduce conflict for ( in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for } in state 73 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 73 resolved as shift
WARNING: shift/reduce conflict for error in state 73 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 73 resolved as shift
WARNING: shift/reduce conflict for ID in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 73 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 73 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 73 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 73 resolved as shift
WARNING: shift/reduce conflict for { in state 73 resolved as shift
WARNING: shift/reduce conflict for ( in state 73 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 73 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 73 resolved as shift
WARNING: shift/reduce conflict for STRING in state 73 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> podprogramy)
WARNING: rejected rule (podprogram -> <empty>) in state 2
WARNING: Rule (podprogram -> <empty>) is never reduced
